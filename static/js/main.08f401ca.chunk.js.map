{"version":3,"sources":["components/Titles.js","components/Form.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Titles","react_default","a","createElement","className","React","Component","Form","onSubmit","this","props","getWeather","type","name","placeholder","Weather","temperature","city","country","humidity","description","apiKey","App","state","undefined","error","_callee","e","apiCall","data","regenerator_default","wrap","_context","prev","next","preventDefault","target","elements","value","fetch","concat","sent","json","console","log","cod","_this","setState","main","temp","weather","sys","stop","components_Titles","components_Form","components_Weather","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.08f401ca.chunk.js","sourcesContent":["import React from 'react'\n\nclass Titles extends React.Component {\n  render() {\n    return(\n      <div>\n        <h1 className=\"title-container__title\">Weather Find</h1>\n        <h3 className=\"title-container__subtitle\">Find out temperature, conditions, and more</h3>\n      </div>\n    )\n  }\n}\n\nexport default Titles","import React from 'react'\n\nclass Form extends React.Component {\n  render() {\n    return(\n      <form onSubmit={this.props.getWeather}>\n        <input type=\"text\" name=\"city\" placeholder=\"City...\"/>\n        <input type=\"text\" name=\"country\" placeholder=\"Country\"/>\n        <button>Get Weather</button>\n      </form>\n    )\n  }\n}\n\nexport default Form","import React from 'react'\n\nclass Weather extends React.Component {\n  render() {\n    if (this.props.temperature) {\n      return(\n        <div className=\"weather__info\">\n          <p className=\"weather__key\">\n          Temperature: <span className=\"weather__value\">{this.props.temperature}&deg;C</span>\n          </p>\n          <p className=\"weather__key\">\n            Location: <span className=\"weather__value\">{this.props.city}, {this.props.country}</span>\n          </p>\n          <p className=\"weather__key\">\n            Humidity: <span className=\"weather__value\">{this.props.humidity}</span>\n          </p>\n          <p className=\"weather__key\">\n            Conditions: <span className=\"weather__value\">{this.props.description}</span>\n          </p>\n        </div>\n      )\n    } else {\n      return(\n        null\n      )\n    }\n  }\n}\n\nexport default Weather","import React from 'react'\nimport Titles from './components/Titles'\nimport Form from './components/Form'\nimport Weather from './components/Weather'\n\nconst apiKey = '41b267bdffde95a9a783cb9e23a9b0d7'\n\nclass App extends React.Component {\n  state = {\n    temperature: undefined,\n    humidity: undefined,\n    description: undefined,\n    city: undefined,\n    country: undefined,\n    error: undefined\n  }\n\n  getWeather = async (e) => {\n    e.preventDefault()\n    const city = e.target.elements.city.value\n    const country = e.target.elements.country.value\n    const apiCall = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${apiKey}&units=metric`)\n    const data = await apiCall.json()\n    console.log(data)\n    if (data.cod === 200) {\n      this.setState({\n        temperature: data.main.temp,\n        humidity: data.main.humidity,\n        description: data.weather[0].description,\n        city: data.name,\n        country: data.sys.country,\n        error: ''\n      })\n    } else {\n      this.setState({\n        error: data.cod\n      })\n      console.log(this.state)\n    }\n  }\n\n  render() {\n    return(\n      <div>\n        <div className=\"wrapper\">\n          <div className=\"main\">\n            <div className=\"container-fluid\">\n              <div className=\"row\">\n                <div className=\"col-xs-5 title-container\">\n                  <Titles />\n                </div>\n                <div className=\"col-xs-7 form-container\">\n                  <Form getWeather={this.getWeather}/>\n                  <Weather \n                    temperature={this.state.temperature}\n                    city={this.state.city}\n                    country={this.state.country}\n                    humidity={this.state.humidity}\n                    description={this.state.description}\n                    error={this.state.error}\n                  />\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>  \n      </div>\n    )\n  }\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport '../node_modules/bootstrap/dist/css/bootstrap.css'\nimport App from './App';\nimport './App.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}